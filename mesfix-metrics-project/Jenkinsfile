def JDK_NAME       = env.JDK_NAME      ?: 'JDK17'
def SONAR_SERVER   = env.SONAR_SERVER  ?: 'SonarQube'
def SONAR_TOKEN_ID = env.SONAR_TOKEN_ID?: 'SONAR_TOKEN'

pipeline {
	agent any

    tools { jdk "${JDK_NAME}" }

    environment {
		SONAR_TOKEN = credentials("${SONAR_TOKEN_ID}")
        GRADLE_OPTS = '-Dorg.gradle.jvmargs=-Xmx1024m'
        VERSION = "${new Date().format('yyyy.MM.dd')}-B${env.BUILD_NUMBER}"
    }

    triggers {
		pollSCM('H/5 * * * *')
    }

    stages {
		stage('Checkout') {
			steps {
				git url: 'https://github.com/everbravo/metricasDeCalidadUTB.git', branch: 'main'
            }
        }
        stage('Clean') {
			steps {
				dir('mesfix-metrics-project') {
					sh './gradlew clean'
                }
            }
        }
        stage('Build & Tests') {
			steps {
				dir('mesfix-metrics-project') {
					sh './gradlew clean test jacocoTestReport'
                }
            }
            post {
				always {
					junit 'mesfix-metrics-project/build/test-results/test/*.xml'
                }
            }
        }
        stage('SonarQube Analysis') {
			steps {
				dir('mesfix-metrics-project') {
					withSonarQubeEnv('SonarQube') {
						sh './gradlew sonarqube -Dsonar.projectVersion=$VERSION --info'
                    }
                }
            }
        }
        stage('Quality Gate') {
			steps {
				timeout(time: 5, unit: 'MINUTES') {
					waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
		always  { cleanWs() }
        success { echo 'Build y analisis completados' }
        failure { echo 'Fallo pipeline; revisar consola' }
    }
}
